# 튜플은 [] 대신 ()을 이용해 여닫는 부분을 작성하는 리스트입니다.
# 리스트와의 유일한 차이점은 내부 요소의 수정이 불가능하다는 점입니다.
# 일단 초기값을 저장하고나면 추가 수정이 불가능한 대신
# 처리속도가 리스트보다 빠릅니다.
score = (87, 95, 76, 100, 98)
sum = 0
for s in score:
    sum += s
print("총점:", sum)
print("평균:", sum/len(score))

# 튜플 생성 시 ()를 생략할 수 있다. ','로만 요소를 구분한다.
tu = 1, 3, 5, 7, 9
print(type(tu))
print(tu)

# 튜플은 반드시 ,를 하나이상 포함시켜준다. ()만 사용하면 계산식인지
# 튜플을 호출하는 문법인지 구별이 되지 않기 때문이다.
tu2 = 2,
print(tu2, type(tu2))

# 튜플의 요소를 읽거나(인덱싱), 범위를 추출하여 잘라내거나(슬라이싱)
# +, * 연산자를 사용하는 것은 가능하지만(원본에 변동 X)
# 튜플 원본에 변경, 삭제 등을 할 경우는 에러가 발생합니다.
tu = 1, 2, 3, 4, 5
# 가능한 경우
print(tu[3])
print(tu[1:4])
print(tu + (6, 7))
print(tu * 2)

# 튜플의 경우 리스트에서 사용할 수 있는 "조회" 연산은 모두 가능합니다.
# .count()와 .index()를 사용할 수 있습니다.
# 그리고 튜플은 타 변수에 대입받을 경우 갯수가 맞다면 내부 요소를
# 나눠서 할당하는 기능도 가지고 있습니다.
tu = "홍길동", "이순신", "강감찬"

hong, lee, kang = tu
print(hong)
print(lee)
print(kang)

a, b = 10, 20
print(a, b)

# 튜플의 장점
# 튜플은 수정, 삭제 등의 로직을 배제할 수 있기 때문에 리스트에 비해
# 속도가 빠르고, 한 번 저장되면 실수로 데이터를 날려먹을 일이 없으며
# 추후 같은 요소를 가진 리스트로 변환시키기도 편하다.
# 리스트 -> 튜플 변환시 tuple()을 사용하고
# 튜플 -> 리스트 변환시 list()를 사용한다.
score = [88, 95, 70, 100, 94]
tu = tuple(score) # 리스트인 score를 튜플로 바꿔서 tu에 저장
# tu[0] = 77 # score과 달리 tu는 변경 불가능
print(tu) # 내부 구성요소는 score과 동일함

li = list(tu) # 튜플 tu를 다시 list로 변환해 li에 저장
li[0] = 77 # 튜플과 달리 list는 변경 가능
print(li) # 내부 구성요소가 변동된 것을 확인