# 개별 변수는 원래 하나의 자료만 하나의 변수에 저장할 수 있었습니다.
# 그러나 개별 변수 하나에 여러 값을 저장하기 위해 리스트를 사용합니다.
# 리스트는 [] 사이에 ,로 구분된 여러 자료를 저장합니다.
# 리스트 길이에는 제한이 없습니다.
# 자료형을 섞어서 저장해도 되지만 일반적으로 하나의 자료형을 넣습니다.
score = [88, 95, 70, 100, 99]
sum = 0
for s in score:
    sum += s
print("총점 : %d" % sum)
print("평균 :", sum / len(score))

# 빈 리스트 생성
# 1. [] 대입하기
list1 = []
print(list1)
# 2. list() 함수 대입하기
list2 = list()
print(list2)

# 리스트 역시 문자열처럼 다룰 수 있습니다.
# 가령 리스트 내부의 자료를 지목해 가져올 때 인덱싱을 사용합니다.
score = [80, 92, 74, 55, 97]

print(score[0], score[2], score[-1])

# 리스트 슬라이싱 - 문자열처럼 슬라이싱 할 수 있으며
# 리스트 슬라이싱의 결과는 리스트로 나옵니다(자료 1개인 경우도)
# 리스트이름[시작인덱스:끝인덱스+1:인덱스구간]
nums = [0,1,2,3,4,5,6,7,8,9]
print(nums[2:5], nums[:4], nums[6:], nums[1:7:2]) # [2,3,4], [0,1,2,3], [6,7,8,9], [1,3,5]

# 문자열은 인덱싱을 이용해 일부 요소만 변경할 수 없습니다.
# 그러나 리스트는 일부 요소만 변경하는 것이 가능합니다.
score = [88, 95, 70, 100, 99]
print(score[2])
score[2] = 77
print(score[2], score)

# 개별 요소를 하나하나 바꿀 수도 있지만 범위를 지정해서
# 일괄적으로 바꾸는 것도 가능합니다.
nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(nums)
nums[2:5] = [20, 30, 40]
print(nums)
nums[6:8] = [90, 91, 92, 93, 94]
print(nums)

# 범위를 지정한 다음 빈 리스트를 대입하거나([]) del 자료 명령어를
# 이용하면 리스트 내부 요소를 삭제할 수도 있습니다.
nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(nums)
nums[2:5] = []
print(nums)
del nums[4]
print(nums)

# 리스트에도 문자열처럼 +, *를 사용할 수 있습니다.
# +는 양쪽 리스트 연결, *는 반복해서 출력입니다.
list1 = [1, 2, 3, 4, 5]
list2 = [10, 11]
listadd = list1 + list2
print(listadd)
listmul = list2 * 4
print(listmul)

# 리스트 내부에는 저장할 수 있는 자료 제한이 없기 때문에 리스트 내부에
# 리스트를 직접 적재하는 것도 가능합니다.
list1 = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]
print(list1[0])
print(list1[2][1])

# 이중 리스트를 반복문 처리하여 모든 요소를 사용하려면
# 루프도 이중으로 돌아야 합니다.
print("-" * 40)
for sub in list1:
    for item in sub:
        print(item, end = " ")
    print()

# 이차원 데이터 처리 예시
# 아파트 한 동에 대해서 신문을 배달할지 말지에 대해서
# 판단할 수 있는 반복문 작성
rooms = [[101, 102, 103, 104],
         [201, 202, 203, 204],
         [301, 302, 303, 304],
         [401, 402, 403, 404]]
nodeliver = [102, 204, 303, 401]

# 중첩 반복문을 이용해서 room 전체를 조회하되
# nodeliver에 포함된 번호는 "요금 미납 세대 %d 호 입니다." 를 출력
# 그렇지 않은 번호는 "%d호에 신문을 배달했습니다." 라고 출력하도록
# 중첩 반복문을 구성해주세요.
for floor in rooms:
    for room in floor:
        if room in nodeliver:
            print("요금 미납 세대 %d호 입니다." % room)
        else:
            print("%d호에 신문을 배달했습니다." % room)

# 리스트 내포(list comprehension)
# 리스트 내부의 자료 하나하나마다 특정 조건을 걸어서 새롭게 저장할 때
# 사용하는 문법입니다.
# 반복문으로 대체할 수 있지만 리스트 내포가 좀 더 코드가 간결합니다.
list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# 위 리스트를 for문으로 내부 요수 하나하나에 2씩 곱해 저장하기
list2 = list()
for i in list1:
    list2.append(i * 2)
print(list2)

# 리스트 내포 문법 => [저장규칙 for 변수 in 배열]
# 배열요소를 변수에 하나씩 번갈아가며 담아 저장규칙에 따라 새로 저장
list3 = [i * 2 for i in list1]
print(list3)

# 내부 요소 전체가 아닌 조건에 맞는 자료만 저장할 경우
# [저장규칙 for 변수 in 배열 if 조건식]
# 홀수에만 *2 해서 저장하고 짝수는 버리기
list4 = [i * 2 for i in list1 if i % 2 == 1]
print(list4)

# list1 내부에 있는 요소 중 짝수만 제곱해서 저장하기
list5 = [i * i for i in list1 if i % 2 == 0]
print(list5)